(()=>{var t={800:t=>{class r{has(t){throw new Error("Abstract method")}}class s extends r{get size(){throw new Error("Abstract Method")}[Symbol.iterator](){throw new Error("Abstract method")}isEmpty(){return 0===this.size}toString(){return`{${Array.from(this).join(", ")}}`}equals(t){if(!(t instanceof s))return!1;if(this.size!==t.size)return!1;for(const r of this)if(!t.has(r))return!1;return!0}}class e extends s{insert(t){throw new Error("Abstract Method")}remove(t){throw new Error("Abstract Method")}add(t){for(const r of t)this.insert(r)}subtract(t){for(const r of t)this.remove(r)}intersect(t){for(const r of this)t.has(r)||this.remove(r)}}class n extends e{constructor(t){super(),this.max=t,this.n=0,this.numBytes=Math.floor(t/8)+1,this.data=new Uint8Array(this.numBytes)}_valid(t){return Number.isInteger(t)&&t>=0&&t<=this.max}_has(t,r){return!!(this.data[t]&n.bits[r])}has(t){if(this._valid(t)){const r=Math.floor(t/8),s=t%8;return this._has(r,s)}return!1}insert(t){if(!this._valid(t))throw new TypeError("Invalid set element: "+t);{const r=Math.floor(t/8),s=t%8;this._has(r,s)||(this.data[r]|=n.bits[s],this.n++)}}remove(t){if(this._valid(t)){const r=Math.floor(t/8),s=t%8;if(!this._has(r,s))throw new TypeError("Invalid set element:"+t);this.data[r]&=n.masks[s],this.n--}}get size(){return this.n}*[Symbol.iterator](){for(let t=0;t<=this.max;t++)this.has(t)&&(yield t)}}n.bits=new Uint8Array([1,2,4,8,16,32,64,128]),n.masks=new Uint8Array([-2,-3,-5,-9,-17,-33,-65,-129]),t.exports=n},724:(t,r)=>{const s=(t,r)=>t+r,e=t=>t*t;r.mean=t=>t.reduce(s)/t.length,r.stddev=function(t){const n=r.mean(t);return Math.sqrt(t.map((t=>t-n)).map(e).reduce(s)/(t.length-1))}}},r={};function s(e){var n=r[e];if(void 0!==n)return n.exports;var i=r[e]={exports:{}};return t[e](i,i.exports,s),i.exports}const e=s(724),n=new(0,s(800).BitSet)(100);n.insert(10),n.insert(20),n.insert(30);const i=e.mean([...n]);console.log(i)})();